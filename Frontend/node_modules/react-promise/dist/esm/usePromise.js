import { useEffect, useState, useRef } from 'react';
export default function usePromise(promiseOrFn) {
    const [state, setState] = useState({
        loading: !!promiseOrFn,
        error: null,
        value: undefined
    });
    const isMounted = useRef(false);
    useEffect(() => {
        isMounted.current = true;
        if (!promiseOrFn) {
            setState({
                loading: false,
                error: null,
                value: undefined
            });
        }
        else {
            if (state.loading === false) {
                setState({
                    loading: true,
                    error: null,
                    value: undefined
                });
            }
            let promise;
            if (typeof promiseOrFn === 'function') {
                promise = promiseOrFn();
            }
            else {
                promise = promiseOrFn;
            }
            promise
                .then((value) => {
                if (isMounted.current) {
                    setState({
                        loading: false,
                        error: null,
                        value
                    });
                }
            })
                .catch((error) => {
                if (isMounted.current) {
                    setState({
                        loading: false,
                        error,
                        value: undefined
                    });
                }
            });
        }
        return () => {
            isMounted.current = false;
        };
    }, [promiseOrFn]);
    return state;
}
//# sourceMappingURL=usePromise.js.map